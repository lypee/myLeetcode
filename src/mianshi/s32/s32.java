package mianshi.s32;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Stack;

public class s32 {
    public static void main(String[]args) throws Exception
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        String[] s = br.readLine().split(" ");
//        int n = 4475 ;
//int[]a={223724,415560,176025,335534,628152,994536,158990,420261,549339,838426,204142,307829,888435,797673,764703,204137,971483,767374,176941,648939,199708,265543,470787,978246,368942,604750,440821,43675,948289,916774,650704,132654,603055,632277,117599,67424,663956,841884,793956,287265,147030,423874,81374,877862,750789,303646,696227,679704,884875,479566,363161,285334,547503,557459,280100,552924,395597,87018,466178,382158,400334,891809,936373,831076,192824,440973,239874,314176,601697,730582,48204,124599,957597,748032,976261,188335,752677,231113,125956,669680,566054,374282,320893,257515,759070,861353,526146,446476,754319,863515,864504,354179,201656,662270,156508,704517,219294,102512,278570,859813,366885,115952,504087,454371,611716,333493,131962,887109,439528,605485,470809,602705,808004,350874,757927,442516,388631,901678,672978,420926,606808,880722,901063,479312,299048,122132,600705,128207,74280,401835,400739,202589,744417,924071,320925,602829,418116,553160,683405,492816,153675,706027,382485,360488,481887,974594,651018,817857,857800,83838,100278,534934,990721,698954,781931,756080,384477,576583,301771,53725,446462,310585,218718,184879,133574,585543,469853,146936,87937,354154,370928,13441,28720,723162,443847,244612,173206,841110,26688,892871,448094,429214,196662,705066,707485,602043,847132,270732,35726,768066,510429,96453,298800,18523,91049,834808,871049,70946,236473,717045,257435,781458,869772,865860,876827,588327,890845,671022,826163,978321,324891,343946,356910,393387,298765,72313,864315,575447,465702,567593,651308,922369,245150,689151,839998,250678,592428,861497,353659,877711,658793,763621,723131,88015,567513,572091,917824,172102,168890,577902,699469,653092,563602,974433,467887,435244,442807,289752,924887,422267,538591,777847,316515,394939,443207,912571,153345,278726,931761,183620,31145,760543,308346,103875,443194,417422,978622,669616,12432,372462,80250,77438,51508,837069,906984,813218,969363,121201,853230,102096,340747,371473,520583,451009,68203,257036,900943,420668,608685,30794,75041,90857,875331,339848,509919,949322,322957,568223,136489,914814,893697,81113,401361,684908,890380,275334,558363,498475,30758,845504,14413,277228,219994,347364,327563,964808,722611,504993,24645,98994,280921,980921,959011,288237,224357,403342,391575,751359,525348,968339,638047,476624,764044,672626,785268,235989,178670,315416,354574,606014,250593,951432,421173,387587,408382,379531,776960,306747,266414,708468,935540,789718,120531,850170,863208,704078,790827,34851,328908,240977,672279,489567,686446,78483,692435,646679,142294,876740,531352,177948,735078,441649,164112,410699,274581,785577,950701,738235,330344,630711,975107,795628,372112,523975,945270,24965,235384,259675,12496,229983,658643,789090,903995,709543,823047,305204,30938,261789,635709,863073,381151,300039,595727,585218,692041,307698,738983,601599,936392,219631,119617,967493,229293,56671,826989,343519,998856,924596,845520,877467,684337,699264,591239,44960,447697,327254,623487,330804,542272,605181,250185,450163,232616,150576,203138,892901,328173,39131,104449,203332,218309,678441,73329,279841,775649,89681,521799,881825,36074,166669,962113,656834,468,758403,874353,632887,790383,265396,759432,105530,420092,174345,729401,533702,347723,494671,914788,192319,731293,210289,472230,328334,808461,750997,499298,42760,104495,17404,748905,540047,464665,120653,981931,152708,604457,394883,470402,450144,172360,627530,703019,971739,671228,118078,647946,373537,296503,576228,31387,495166,816934,990399,792939,532359,704629,654463,510483,807233,221673,491953,984476,752948,884344,306256,909824,939194,657694,932816,948242,684679,279679,551541,316524,142415,361890,571345,808759,166788,445939,471777,472643,992197,574631,762151,626763,899176,411534,974538,865497,520734,273914,207683,320896,254047,86511,609017,869618,296610,708195,387909,269522,16417,571896,812910,693096,95720,360510,825847,805076,663951,571689,323400,934311,107444,724833,351344,406030,698668,283223,74869,407989,59928,874982,934952,82848,476681,645878,897337,462157,306780,497618,862336,109206,255066,280442,168293,46944,562073,650151,621203,895546,96601,684954,520863,770409,119712,68957,367485,492643,813912,536781,151312,291290,746458,889345,125957,187861,464356,613200,218121,778156,29833,91270,463206,447087,799627,856945,4543,704250,612409,789442,837516,929300,403420,304053,981590,771419,85268,72009,514668,493479,658522,374879,410278,585987,524179,429858,370268,915679,389501,24642,271842,875709,666153,30312,302636,137529,765414,222459,750918,880178,553367,996769,18444,933800,636182,843273,834480,652738,372928,507755,218792,358928,21617,617451,749233,784329,156760,291403,57056,384133,748029,612874,92185,454281,708061,680843,164691,341998,75497,678861,394771,193475,515902,920351,610924,490486,964323,163911,294317,226204,344089,300918,476858,939002,435122,397402,160381,325696,467223,248425,101502,623409,501080,281900,339458,643847,372919,939943,843027,629789,102861,515263,43858,632268,104373,721582,925719,572323,788006,228885,710803,326542,462176,932313,919530,982881,54508,908348,173189,925087,469077,600759,661217,988883,882052,717014,643973,487353,565445,751989,703205,13963,902809,497159,544944,552718,244520,803108,155123,799766,611384,138952,590184,391634,300536,124,935491,909038,86680,602500,968026,22239,388066,978890,744311,402553,22304,935272,307988,821626,340203,329300,389726,910123,456617,920466,336740,853196,640060,88594,99397,602962,934800,492022,720167,775065,749973,466200,16985,340594,734028,166296,716825,390692,666587,565223,617725,840215,460950,148037,19454,497370,843105,344522,727077,492138,140810,457001,781566,895165,975434,484797,543350,232891,399827,173008,206624,987672,276464,345532,121267,776832,692810,451178,756433,279646,38214,295316,934143,461638,15152,555462,205810,403414,954825,426942,838530,110042,676861,380502,813133,75649,720513,933065,214939,204713,868641,126858,750088,717967,966297,19573,931179,509547,86342,317901,834151,966440,777837,194891,905685,471161,815455,17625,179151,745463,791365,668088,230501,339375,577435,894298,147759,221426,800694,770309,30083,904389,320810,568919,677636,400785,230593,958536,458012,888757,18048,515206,82341,618843,125549,476762,453960,449834,359981,124799,961386,368153,145605,154844,319996,637781,701386,207446,211101,796534,981442,563982,358522,854073,403022,926886,885211,467372,112757,182091,607652,106957,233801,351742,154070,28578,768273,643275,251352,457081,980739,251659,435812,10512,570982,75120,731076,66168,567126,921802,224575,90991,273126,420412,965709,224183,833017,883579,89489,259047,206336,455173,308380,177187,277892,926361,147038,665608,957623,221946,504349,156562,207361,854976,586009,162254,403991,266258,921568,168626,913120,96464,905368,429660,626880,576352,426297,427919,584790,322322,415826,109505,365861,366331,844877,842425,896057,247777,428786,679932,211125,282656,422689,440436,196788,21347,317039,526181,464125,682390,538918,787872,56430,521797,367042,172147,311088,694061,867260,503767,914464,517586,646924,213240,721413,131605,338690,116635,473327,675739,557909,915043,253888,687931,982312,19940,801038,282379,771522,312621,622483,830020,976942,454238,842451,406633,122532,984922,86433,35299,451139,949};

        int[] a = new int[n];
        for(int i = 0 ; i < n ; i++)
        {
            a[i] = Integer.parseInt(s[i]);
        }
//        int[] a ={6,2,5,4,5,1,6};
        int length = a.length ;
        int res = 0 ;
        int len = a.length ;
        for(int i = 0 ; i < len ; i++)
        {
            int minHeight = a[i];
            for(int j = i+1 ; j < len  ; j ++)
            {
                minHeight = Math.min(minHeight, a[j]);
                res = Math.max(res, (j - i + 1) * minHeight);
            }
        }

//        for(int i = 0 ; i < length  ; i++)
//        {
//            int left = i ;
//            int right = i ;
//            while(left > 0 && a[left] >= a[i]){
//                left-- ;
//            }
//            while(right < length   && a[right] >= a[i]){
//                right++ ;
//            }
//            res  = Math.max(res , a[i]* (right - left -1 )) ;
//        }
        System.out.println(res);
    }
    public static void getHeigh(int[]a)
    {
        Stack<Integer> stack = new Stack<>();
        for(int i = 0 ;i < a.length ; i++)
        {
            stack.push(a[i]) ;
        }
        int[] help = new int[a.length];
        //找出数组两端比当前值大的范围下标
        for(int i = 0 ; i < a.length ; i++)
        {
            help[i] = getRange(a, i);
        }
        //最大高度
        int res = 0 ;
        for(int i = 0 ; i < a.length ; i++)
        {
            res = Math.max(res, a[i] * help[i]);
        }
        System.out.println(res);

    }
    public static int getRange(int[]a , int index)
    {
        int res = 1 ;
        if(index ==  0 )
        {
            res = 0 ;
            for(int i = 0 ; i < a.length ; i++)
            {
                if(a[i] >= a[index] )
                {
                    res++ ;
                }else {
                    break;
                }
            }
        }else if(index == a.length -1 )
        {
            for(int i = 0 ; i < a.length-1 ; i++)
            {
                if(a[i] >= index)
                {
                    res++ ;
                }else {
                    break;
                }
            }
        }
        else{
            for(int i = index -1  ; i >= 0 ; i--)
            {
                if(a[i] > a[index])
                {
                    res ++ ;
                }else {
                    break;
                }
            }
            for(int i = index + 1 ; i < a.length ; i++)
            {
                if(a[i] >= a[index]){
                    res ++ ;
                }else {
                    break;
                }
            }
        }

        return res ;
    }
}
